Nonterminals useless in grammar

   alias
   array_expr
   array_index
   between_expr
   binary_expr
   bool_literal
   case_expr
   case_list
   cast_expr
   column_name
   comp_expr
   datetime_field
   drop_statement
   execute_statement
   exists_expr
   export_statement
   expr
   expr_alias
   extract_expr
   file_path
   file_type
   from_clause
   function_expr
   hint
   import_statement
   in_expr
   int_literal
   join_clause
   join_condition
   logic_expr
   nonjoin_table_ref_atomic
   null_literal
   operand
   opt_alias
   opt_all
   opt_distinct
   opt_exists
   opt_file_type
   opt_from_clause
   opt_group
   opt_having
   opt_join_type
   opt_limit
   opt_order_type
   opt_table_alias
   opt_top
   opt_where
   order_desc
   param_expr
   prepare_statement
   prepare_target_query
   scalar_expr
   select_clause
   select_no_paren
   select_statement
   select_with_paren
   select_within_set_operation
   select_within_set_operation_no_parentheses
   set_operator
   set_type
   show_statement
   statement
   statement_list
   string_literal
   table_alias
   table_ref
   table_ref_atomic
   table_ref_name
   table_ref_name_no_alias
   transaction_statement
   unary_expr
   update_clause
   update_statement
   with_description


Terminals unused in grammar

   STRING
   DEALLOCATE
   PARAMETERS
   INTERSECT
   TEMPORARY
   TIMESTAMP
   DISTINCT
   NVARCHAR
   RESTRICT
   ANALYZE
   BETWEEN
   CASCADE
   COLUMNS
   CONTROL
   DEFAULT
   EXECUTE
   EXPLAIN
   NATURAL
   PREPARE
   PRIMARY
   SCHEMAS
   SPATIAL
   VIRTUAL
   DESCRIBE
   BEFORE
   COLUMN
   DIRECT
   DOUBLE
   ESCAPE
   EXCEPT
   EXTRACT
   CAST
   FORMAT
   GLOBAL
   HAVING
   IMPORT
   ISNULL
   OFFSET
   RENAME
   SCHEMA
   SELECT
   SORTED
   TABLES
   UNIQUE
   UNLOAD
   UPDATE
   AFTER
   ALTER
   CROSS
   DELTA
   FLOAT
   GROUP
   INDEX
   INNER
   LIMIT
   LOCAL
   MERGE
   MINUS
   ORDER
   OUTER
   RIGHT
   UNION
   USING
   WHERE
   CALL
   CASE
   CHAR
   COPY
   DATE
   DATETIME
   DESC
   DROP
   ELSE
   FILE
   FULL
   HASH
   HINT
   JOIN
   LEFT
   LIKE
   LOAD
   LONG
   PLAN
   SHOW
   TEXT
   THEN
   TIME
   VIEW
   WHEN
   WITH
   ADD
   ALL
   AND
   ASC
   END
   FOR
   INT
   KEY
   OFF
   SET
   TOP
   AS
   BY
   IN
   IS
   OF
   ON
   OR
   TO
   ARRAY
   CONCAT
   ILIKE
   SECOND
   MINUTE
   HOUR
   DAY
   MONTH
   YEAR
   TRUE
   FALSE
   TRANSACTION
   BEGIN
   COMMIT
   ROLLBACK


Grammar

    0 $accept: preparable_statement $end

    1 preparable_statement: delete_statement
    2                     | truncate_statement
    3                     | insert_statement
    4                     | create_statement

    5 delete_statement: DELETE FROM table_name

    6 truncate_statement: TRUNCATE table_name

    7 insert_statement: INSERT INTO table_name opt_column_list VALUES '(' literal_list ')'

    8 create_statement: CREATE TABLE opt_not_exists table_name '(' column_def_commalist ')'

    9 opt_not_exists: IF NOT EXISTS
   10               | %empty

   11 column_def_commalist: column_def
   12                     | column_def_commalist ',' column_def

   13 column_def: IDENTIFIER column_type opt_column_nullable

   14 column_type: VARCHAR
   15            | INTEGER

   16 opt_column_nullable: NULL
   17                    | NOT NULL
   18                    | %empty

   19 opt_column_list: '(' ident_commalist ')'
   20                | %empty

   21 ident_commalist: IDENTIFIER
   22                | ident_commalist ',' IDENTIFIER

   23 literal_list: literal
   24             | literal_list ',' literal

   25 literal: num_literal

   26 num_literal: FLOATVAL
   27            | INTVAL

   28 table_name: IDENTIFIER


Terminals, with rules where they appear

$end (0) 0
'(' (40) 7 8 19
')' (41) 7 8 19
',' (44) 12 22 24
error (256)
IDENTIFIER (258) 13 21 22 28
STRING (259)
FLOATVAL (260) 26
INTVAL (261) 27
DEALLOCATE (262)
PARAMETERS (263)
INTERSECT (264)
TEMPORARY (265)
TIMESTAMP (266)
DISTINCT (267)
NVARCHAR (268)
RESTRICT (269)
TRUNCATE (270) 6
ANALYZE (271)
BETWEEN (272)
CASCADE (273)
COLUMNS (274)
CONTROL (275)
DEFAULT (276)
EXECUTE (277)
EXPLAIN (278)
INTEGER (279) 15
NATURAL (280)
PREPARE (281)
PRIMARY (282)
SCHEMAS (283)
SPATIAL (284)
VARCHAR (285) 14
VIRTUAL (286)
DESCRIBE (287)
BEFORE (288)
COLUMN (289)
CREATE (290) 8
DELETE (291) 5
DIRECT (292)
DOUBLE (293)
ESCAPE (294)
EXCEPT (295)
EXISTS (296) 9
EXTRACT (297)
CAST (298)
FORMAT (299)
GLOBAL (300)
HAVING (301)
IMPORT (302)
INSERT (303) 7
ISNULL (304)
OFFSET (305)
RENAME (306)
SCHEMA (307)
SELECT (308)
SORTED (309)
TABLES (310)
UNIQUE (311)
UNLOAD (312)
UPDATE (313)
VALUES (314) 7
AFTER (315)
ALTER (316)
CROSS (317)
DELTA (318)
FLOAT (319)
GROUP (320)
INDEX (321)
INNER (322)
LIMIT (323)
LOCAL (324)
MERGE (325)
MINUS (326)
ORDER (327)
OUTER (328)
RIGHT (329)
TABLE (330) 8
UNION (331)
USING (332)
WHERE (333)
CALL (334)
CASE (335)
CHAR (336)
COPY (337)
DATE (338)
DATETIME (339)
DESC (340)
DROP (341)
ELSE (342)
FILE (343)
FROM (344) 5
FULL (345)
HASH (346)
HINT (347)
INTO (348) 7
JOIN (349)
LEFT (350)
LIKE (351)
LOAD (352)
LONG (353)
NULL (354) 16 17
PLAN (355)
SHOW (356)
TEXT (357)
THEN (358)
TIME (359)
VIEW (360)
WHEN (361)
WITH (362)
ADD (363)
ALL (364)
AND (365)
ASC (366)
END (367)
FOR (368)
INT (369)
KEY (370)
NOT (371) 9 17
OFF (372)
SET (373)
TOP (374)
AS (375)
BY (376)
IF (377) 9
IN (378)
IS (379)
OF (380)
ON (381)
OR (382)
TO (383)
ARRAY (384)
CONCAT (385)
ILIKE (386)
SECOND (387)
MINUTE (388)
HOUR (389)
DAY (390)
MONTH (391)
YEAR (392)
TRUE (393)
FALSE (394)
TRANSACTION (395)
BEGIN (396)
COMMIT (397)
ROLLBACK (398)


Nonterminals, with rules where they appear

$accept (147)
    on left: 0
preparable_statement (148)
    on left: 1 2 3 4, on right: 0
delete_statement (149)
    on left: 5, on right: 1
truncate_statement (150)
    on left: 6, on right: 2
insert_statement (151)
    on left: 7, on right: 3
create_statement (152)
    on left: 8, on right: 4
opt_not_exists (153)
    on left: 9 10, on right: 8
column_def_commalist (154)
    on left: 11 12, on right: 8 12
column_def (155)
    on left: 13, on right: 11 12
column_type (156)
    on left: 14 15, on right: 13
opt_column_nullable (157)
    on left: 16 17 18, on right: 13
opt_column_list (158)
    on left: 19 20, on right: 7
ident_commalist (159)
    on left: 21 22, on right: 19 22
literal_list (160)
    on left: 23 24, on right: 7 24
literal (161)
    on left: 25, on right: 23 24
num_literal (162)
    on left: 26 27, on right: 25
table_name (163)
    on left: 28, on right: 5 6 7 8


State 0

    0 $accept: . preparable_statement $end

    TRUNCATE  shift, and go to state 1
    CREATE    shift, and go to state 2
    DELETE    shift, and go to state 3
    INSERT    shift, and go to state 4

    preparable_statement  go to state 5
    delete_statement      go to state 6
    truncate_statement    go to state 7
    insert_statement      go to state 8
    create_statement      go to state 9


State 1

    6 truncate_statement: TRUNCATE . table_name

    IDENTIFIER  shift, and go to state 10

    table_name  go to state 11


State 2

    8 create_statement: CREATE . TABLE opt_not_exists table_name '(' column_def_commalist ')'

    TABLE  shift, and go to state 12


State 3

    5 delete_statement: DELETE . FROM table_name

    FROM  shift, and go to state 13


State 4

    7 insert_statement: INSERT . INTO table_name opt_column_list VALUES '(' literal_list ')'

    INTO  shift, and go to state 14


State 5

    0 $accept: preparable_statement . $end

    $end  shift, and go to state 15


State 6

    1 preparable_statement: delete_statement .

    $default  reduce using rule 1 (preparable_statement)


State 7

    2 preparable_statement: truncate_statement .

    $default  reduce using rule 2 (preparable_statement)


State 8

    3 preparable_statement: insert_statement .

    $default  reduce using rule 3 (preparable_statement)


State 9

    4 preparable_statement: create_statement .

    $default  reduce using rule 4 (preparable_statement)


State 10

   28 table_name: IDENTIFIER .

    $default  reduce using rule 28 (table_name)


State 11

    6 truncate_statement: TRUNCATE table_name .

    $default  reduce using rule 6 (truncate_statement)


State 12

    8 create_statement: CREATE TABLE . opt_not_exists table_name '(' column_def_commalist ')'

    IF  shift, and go to state 16

    $default  reduce using rule 10 (opt_not_exists)

    opt_not_exists  go to state 17


State 13

    5 delete_statement: DELETE FROM . table_name

    IDENTIFIER  shift, and go to state 10

    table_name  go to state 18


State 14

    7 insert_statement: INSERT INTO . table_name opt_column_list VALUES '(' literal_list ')'

    IDENTIFIER  shift, and go to state 10

    table_name  go to state 19


State 15

    0 $accept: preparable_statement $end .

    $default  accept


State 16

    9 opt_not_exists: IF . NOT EXISTS

    NOT  shift, and go to state 20


State 17

    8 create_statement: CREATE TABLE opt_not_exists . table_name '(' column_def_commalist ')'

    IDENTIFIER  shift, and go to state 10

    table_name  go to state 21


State 18

    5 delete_statement: DELETE FROM table_name .

    $default  reduce using rule 5 (delete_statement)


State 19

    7 insert_statement: INSERT INTO table_name . opt_column_list VALUES '(' literal_list ')'

    '('  shift, and go to state 22

    $default  reduce using rule 20 (opt_column_list)

    opt_column_list  go to state 23


State 20

    9 opt_not_exists: IF NOT . EXISTS

    EXISTS  shift, and go to state 24


State 21

    8 create_statement: CREATE TABLE opt_not_exists table_name . '(' column_def_commalist ')'

    '('  shift, and go to state 25


State 22

   19 opt_column_list: '(' . ident_commalist ')'

    IDENTIFIER  shift, and go to state 26

    ident_commalist  go to state 27


State 23

    7 insert_statement: INSERT INTO table_name opt_column_list . VALUES '(' literal_list ')'

    VALUES  shift, and go to state 28


State 24

    9 opt_not_exists: IF NOT EXISTS .

    $default  reduce using rule 9 (opt_not_exists)


State 25

    8 create_statement: CREATE TABLE opt_not_exists table_name '(' . column_def_commalist ')'

    IDENTIFIER  shift, and go to state 29

    column_def_commalist  go to state 30
    column_def            go to state 31


State 26

   21 ident_commalist: IDENTIFIER .

    $default  reduce using rule 21 (ident_commalist)


State 27

   19 opt_column_list: '(' ident_commalist . ')'
   22 ident_commalist: ident_commalist . ',' IDENTIFIER

    ')'  shift, and go to state 32
    ','  shift, and go to state 33


State 28

    7 insert_statement: INSERT INTO table_name opt_column_list VALUES . '(' literal_list ')'

    '('  shift, and go to state 34


State 29

   13 column_def: IDENTIFIER . column_type opt_column_nullable

    INTEGER  shift, and go to state 35
    VARCHAR  shift, and go to state 36

    column_type  go to state 37


State 30

    8 create_statement: CREATE TABLE opt_not_exists table_name '(' column_def_commalist . ')'
   12 column_def_commalist: column_def_commalist . ',' column_def

    ')'  shift, and go to state 38
    ','  shift, and go to state 39


State 31

   11 column_def_commalist: column_def .

    $default  reduce using rule 11 (column_def_commalist)


State 32

   19 opt_column_list: '(' ident_commalist ')' .

    $default  reduce using rule 19 (opt_column_list)


State 33

   22 ident_commalist: ident_commalist ',' . IDENTIFIER

    IDENTIFIER  shift, and go to state 40


State 34

    7 insert_statement: INSERT INTO table_name opt_column_list VALUES '(' . literal_list ')'

    FLOATVAL  shift, and go to state 41
    INTVAL    shift, and go to state 42

    literal_list  go to state 43
    literal       go to state 44
    num_literal   go to state 45


State 35

   15 column_type: INTEGER .

    $default  reduce using rule 15 (column_type)


State 36

   14 column_type: VARCHAR .

    $default  reduce using rule 14 (column_type)


State 37

   13 column_def: IDENTIFIER column_type . opt_column_nullable

    NULL  shift, and go to state 46
    NOT   shift, and go to state 47

    $default  reduce using rule 18 (opt_column_nullable)

    opt_column_nullable  go to state 48


State 38

    8 create_statement: CREATE TABLE opt_not_exists table_name '(' column_def_commalist ')' .

    $default  reduce using rule 8 (create_statement)


State 39

   12 column_def_commalist: column_def_commalist ',' . column_def

    IDENTIFIER  shift, and go to state 29

    column_def  go to state 49


State 40

   22 ident_commalist: ident_commalist ',' IDENTIFIER .

    $default  reduce using rule 22 (ident_commalist)


State 41

   26 num_literal: FLOATVAL .

    $default  reduce using rule 26 (num_literal)


State 42

   27 num_literal: INTVAL .

    $default  reduce using rule 27 (num_literal)


State 43

    7 insert_statement: INSERT INTO table_name opt_column_list VALUES '(' literal_list . ')'
   24 literal_list: literal_list . ',' literal

    ')'  shift, and go to state 50
    ','  shift, and go to state 51


State 44

   23 literal_list: literal .

    $default  reduce using rule 23 (literal_list)


State 45

   25 literal: num_literal .

    $default  reduce using rule 25 (literal)


State 46

   16 opt_column_nullable: NULL .

    $default  reduce using rule 16 (opt_column_nullable)


State 47

   17 opt_column_nullable: NOT . NULL

    NULL  shift, and go to state 52


State 48

   13 column_def: IDENTIFIER column_type opt_column_nullable .

    $default  reduce using rule 13 (column_def)


State 49

   12 column_def_commalist: column_def_commalist ',' column_def .

    $default  reduce using rule 12 (column_def_commalist)


State 50

    7 insert_statement: INSERT INTO table_name opt_column_list VALUES '(' literal_list ')' .

    $default  reduce using rule 7 (insert_statement)


State 51

   24 literal_list: literal_list ',' . literal

    FLOATVAL  shift, and go to state 41
    INTVAL    shift, and go to state 42

    literal      go to state 53
    num_literal  go to state 45


State 52

   17 opt_column_nullable: NOT NULL .

    $default  reduce using rule 17 (opt_column_nullable)


State 53

   24 literal_list: literal_list ',' literal .

    $default  reduce using rule 24 (literal_list)
